{"version":3,"sources":["app/collections/frames.js","app/initialize.js","app/lib/helpers.js","app/models/frame.js","app/routers/main.js","app/views/app.js","app/views/frame.js","app/views/frames.js","app/views/game.js","app/views/templates/frame.hbs","app/views/templates/frames.hbs","app/views/templates/game-over.hbs"],"names":[],"mappingsjvJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA","file":"public/javascripts/app.js","sourcesContent":["var Frame = require('../models/frame');\n\nvar Frames = Backbone.Collection.extend({\n  model: Frame,\n\n  /**\n   * Initialize the collection with 10 frames. Set the last\n   * one to be extendable.\n   */\n  initialize: function() {\n    var i = Frames.NUM_FRAMES;\n\n    while(i--) {\n      this.push(new Frame());\n    }\n\n    this.at(Frames.NUM_FRAMES - 1).set('extendable', true);\n    this.currentFrameIndex = 0;\n  },\n\n  /**\n   * Get the current frame in play.\n   */\n  getCurrentFrame: function() {\n    return this.at(this.currentFrameIndex);\n  },\n\n  /**\n   * Adjust other frame scores according to \n   * spare rules.\n   */\n  handleSpare: function() {\n    var currentFrame = this.getCurrentFrame(),\n      lastFrame = this.at(this.currentFrameIndex - 1);\n\n    if(!lastFrame) {\n      return;\n    }\n\n    if(lastFrame.isSpare()) {\n      lastFrame.set('total', lastFrame.get('total') + currentFrame.get('results')[0]);\n    }\n  },\n\n  /**\n   * Adjust other frame scores according to strike\n   * rules.\n   */\n  handleStrike: function() {\n    var currentFrame = this.getCurrentFrame(),\n      lastFrame = this.at(this.currentFrameIndex - 1),\n      lastLastFrame = this.at(this.currentFrameIndex - 2);\n\n    if(!lastFrame) {\n      return;\n    }\n\n    if(lastFrame.isStrike()) {\n      lastFrame.set('total', lastFrame.get('total') + currentFrame.getTotal());\n\n      if(lastLastFrame && lastLastFrame.isStrike() && this.currentFrameIndex !== Frames.NUM_FRAMES - 1) {\n        lastLastFrame.set('total', lastLastFrame.get('total') + currentFrame.get('results')[0]);\n      }\n    }\n  },\n\n  /**\n   * Score and advance the game with the given number\n   * of felled pins.\n   * @param  {Integer} pinsFelled The number of pins knocked down.\n   */\n  tally: function(pinsFelled) {\n    var currentFrame = this.getCurrentFrame();\n    currentFrame.set('played', true);\n    currentFrame.tally(pinsFelled);\n\n    if(currentFrame.isClosed()) {\n      this.handleSpare();\n      this.handleStrike();\n\n      this.currentFrameIndex += 1;\n      this.trigger('new-frame');\n    }\n  },\n\n  /**\n   * Get the total score for all the frames.\n   * @return {Integer} The total score.\n   */\n  getTotalScore: function() {\n    return _.reduce(this.models, function(memo, frame) {\n      return memo + frame.get('total');\n    }, 0);\n  }\n});\n\nFrames.NUM_FRAMES = 10;\nmodule.exports = Frames;","require('lib/helpers');\nrequire('routers/main');\n\n$(function() {\n  Backbone.history.start({\n    pushState: true\n  });\n});\n","/**\n * Helper to interate a block n number of times.\n */\nHandlebars.registerHelper('times', function(n, block) {\n    var accum = '';\n    for(var i = 0; i < n; ++i)\n        accum += block.fn(i);\n    return accum;\n});","var Frame = Backbone.Model.extend({\n  defaults: function() {\n    return {\n      results: [],\n      total: 0,\n      played: false,\n      extendable: false\n    };\n  },\n\n  initialize: function() {\n    this.frameLength = Frame.DEFAULT_LENGTH;\n  },\n\n  /**\n   * Score this frame according to a number of\n   * fallen pins.\n   * @param  {Integer} pinsFelled The number of pins fallen\n   */\n  tally: function(pinsFelled) {\n    var results = this.get('results');\n\n    if(!this.isClosed()) {\n      results.push(pinsFelled);\n      this.set('total', this.getTotal());\n      this.trigger('change:total', this, this.get('total'));\n      this.trigger('change:results', this, results);\n    }\n\n    if(this.get('extendable')) {\n      this.extendIfNeeded();\n    }\n  },\n\n  /**\n   * Determine if this frame has been played out.\n   * @return {Boolean} True if the frame doesn't support any more bowls.\n   */\n  isClosed: function() {\n    return (!this.get('extendable') && (this.isStrike() || this.get('results').length === this.frameLength)) ||\n      (this.get('extendable') && this.get('results').length === this.frameLength);\n  },\n\n  /**\n   * Determine if this frame is a strike frame.\n   * @return {Boolean} True if this is a strike frame.\n   */\n  isStrike: function() {\n    return this.get('results')[0] === 10;\n  },\n\n  /**\n   * Determin if this frame is a spare frame.\n   * @return {Boolean} True if the second bowl eliminated all the pins.\n   */\n  isSpare: function() {\n    var results = this.get('results');\n    return results[0] < 10 && results[0] + results[1] === 10;\n  },\n\n  /**\n   * Count the total score for this frame\n   * @return {Integer} The score for this frame.\n   */\n  getTotal: function() {\n    return _.reduce(this.get('results'), function(memo, num) {\n      return memo + num;\n    }, 0);\n  },\n\n  /**\n   * Get the number of pins that should be displayed.\n   * @return {Integer} The number of pins left\n   */\n  getNumPins: function() {\n    var results = this.get('results');\n    return Frame.NUM_PINS - (this.getTotal());\n  },\n\n  /**\n   * Extend this frame to 3 play slots if it's extendable.\n   * Used for final frame.\n   */\n  extendIfNeeded: function() {\n    if(this.isSpare() || this.isStrike()){\n      this.frameLength = 3;\n    }\n  },\n\n  /**\n   * Get a formatted representation of the score\n   * results for this frame.\n   * @return {String} A formatted representation of this frame's score.\n   */\n  formattedResults: function() {\n    var out = '',\n      played = this.get('played'),\n      results = this.get('results'),\n      remainder;\n\n    if(!played) {\n      return out;\n    }\n\n    out += results[0] === 10 ? 'X' : results[0] + ' ';\n\n    if(this.isStrike() && !this.get('extendable')) {\n      return out;\n    }\n\n    if(this.isSpare()) {\n      out += '/';\n    } else if (results[1] === 0) {\n      out += \"-\";\n    } else {\n      out += results[1] === undefined ? ' ' : results[1];\n    }\n\n    out += _.reduce(results.slice(2), function(memo, result){\n      return memo + result + ' ';\n    }, '');\n\n    return out;\n  },\n\n  /**\n   * Get a formatted representation of this frame's total score.\n   * @return {String} The total representation.\n   */\n  formattedTotal: function() {\n    return !this.get('played') ? '' : this.get('total');\n  },\n\n  /** \n   * Override the default toJSON method to include\n   * formatted representations of certain frame\n   * characteristics.\n   * @return {Object} A JSON representation of this frame.\n   */\n  toJSON: function(options) {\n    var props = _.clone(this.attributes);\n    props.results = this.formattedResults();\n    props.total = this.formattedTotal();\n    props.numPins = this.getNumPins();\n\n    return props;\n  }\n});\n\nFrame.NUM_PINS = 10;\nFrame.DEFAULT_LENGTH = 2;\nmodule.exports = Frame;","var AppRouter = Backbone.Router.extend({\n  routes: {\n    '': 'index'\n  },\n\n  index: function() {\n    var AppView = require('views/app');\n    this.appView = new AppView();\n  }\n});\n\nAppRouter = new AppRouter();\nmodule.exports = AppRouter;\n","var GameView = require('./game');\n\nmodule.exports = Backbone.View.extend({\n  el: 'body',\n\n  /**\n   * Start the game.\n   */\n  initialize: function() {\n    new GameView();\n  }\n});\n","var Frame = require('../models/frame');\nvar template = require('./templates/frame');\n\nmodule.exports = Backbone.View.extend({\n  el: '.deck',\n\n  template: template,\n\n  /**\n   * Render the pins and listen to change events on\n   * the frame model.\n   */\n  initialize: function() {\n    this.listenTo(this.model, 'change:results', this.render);\n    this.render();\n  },\n\n  render: function() {\n    this.$el.html(this.template({frame: this.model.toJSON()}));\n    return this;\n  }\n\n});\n","var Frames = require('../collections/frames');\nvar FrameView = require('../views/frame');\nvar template = require('./templates/frames');\nvar gameOverTemplate = require('./templates/game-over');\n\nmodule.exports = Backbone.View.extend({\n  el: '.scoreboard',\n\n  template: template,\n\n  gameOverTemplate: gameOverTemplate,\n\n  /**\n   * Initialize the individual frame view and listen to \n   * change events on the frames collection.\n   */\n  initialize: function() {\n    this.$alley = $('.alley');\n    this.$bowlButton = $('.bowl', this.$alley);\n    this.currentFrameView = new FrameView({model: this.collection.getCurrentFrame()});\n    this.listenTo(this.collection, 'change:total', this.render);\n    this.listenTo(this.collection, 'new-frame', this.newFrame);\n    this.render();\n  },\n\n  render: function() {\n    this.$el.html(this.template({frames: this.collection.toJSON()}));\n    return this;\n  },\n\n  newFrame: function() {\n    var self = this,\n      currentFrame = this.collection.getCurrentFrame();\n\n    if(!currentFrame){\n      this.$alley.html(this.gameOverTemplate({score: this.collection.getTotalScore()}));\n    } else {\n      // let the user see the last roll and kind of \n      // imitate the resetting of the pins\n      this.$bowlButton.prop('disabled', true);\n      setTimeout(function() {\n        self.currentFrameView = new FrameView({model: self.collection.getCurrentFrame()});\n        self.$bowlButton.prop('disabled', false);\n      }, 500);\n      \n    }\n  }\n\n});\n","var Frame = require('../models/frame');\nvar Frames = require('../collections/frames');\nvar FramesView = require('./frames');\n\nmodule.exports = Backbone.View.extend({\n  el: '.alley',\n\n  events: {\n    'click button.bowl': \"bowl\"\n  },\n\n  /**\n   * Initialize the frames collection and their corresponding view.\n   */\n  initialize: function() {\n    this.frames = new Frames();\n    this.framesView = new FramesView({collection: this.frames});\n  },\n\n  /**\n   * Execute a random bowl.\n   */\n  bowl: function() {\n    var remainingPins = this.frames.getCurrentFrame().getNumPins();\n    this._bowl(Math.round(Math.random() * remainingPins));\n  },\n\n  /**\n   * Execute a bowl with the given number of pins \n   * fallen.\n   * @param  {Integer} pinsFelled The number of pins that should fall.\n   */\n  _bowl: function(pinsFelled) {\n    this.frames.tally(pinsFelled);\n  }\n});\n","var __templateData = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var stack1, helper, options, self=this, helperMissing=helpers.helperMissing, functionType=\"function\", blockHelperMissing=helpers.blockHelperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n<ul class=\\\"pins clearfix\\\">\\n  \";\n  stack1 = (helper = helpers.times || (depth0 && depth0.times),options={hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.numPins), options) : helperMissing.call(depth0, \"times\", (depth0 && depth0.numPins), options));\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</ul>\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"\\n  <li class=\\\"pin\\\"></li>\\n  \";\n  }\n\n  options={hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data}\n  if (helper = helpers.frame) { stack1 = helper.call(depth0, options); }\n  else { helper = (depth0 && depth0.frame); stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper; }\n  if (!helpers.frame) { stack1 = blockHelperMissing.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data}); }\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  });\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n  <li class=\\\"frame\\\">\\n    <div class=\\\"results\\\">\";\n  if (helper = helpers.results) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.results); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    <div class=\\\"running-total\\\">\";\n  if (helper = helpers.total) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.total); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n  </li>\\n  \";\n  return buffer;\n  }\n\n  buffer += \"<ul class=\\\"frames clearfix\\\">\\n  \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.frames), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</ul>\";\n  return buffer;\n  });\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","var __templateData = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"game-over\\\">\\n  <p>GAME OVER</p>\\n  <p>\";\n  if (helper = helpers.score) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.score); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</p>\\n  <a href=\\\"/\\\">PLAY AGAIN</a>\\n</div>\";\n  return buffer;\n  });\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}"]}